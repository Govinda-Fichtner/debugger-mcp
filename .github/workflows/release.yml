# Release Pipeline for debugger-mcp
# Triggered when a tag is pushed (e.g., v1.0.0)
# Builds multi-arch binaries and creates GitHub release

name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Matches v1.0.0, v2.1.3, etc.

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          body: |
            # Release ${{ steps.get_version.outputs.version }}

            ## Installation

            Download the appropriate binary for your platform:
            - `debugger-mcp-x86_64-unknown-linux-gnu` - Linux x86_64
            - `debugger-mcp-aarch64-unknown-linux-gnu` - Linux ARM64

            Make it executable and run:
            ```bash
            chmod +x debugger-mcp-*
            ./debugger-mcp-* serve
            ```

            ## What's Changed

            See the [CHANGELOG](https://github.com/${{ github.repository }}/compare/${{ steps.get_version.outputs.version }}...main) for details.

  build-release:
    name: Build Release (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    needs: create-release

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            arch: x86_64

          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            arch: aarch64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }} --verbose

      - name: Strip binary
        if: matrix.target != 'aarch64-unknown-linux-gnu'
        run: strip target/${{ matrix.target }}/release/debugger_mcp

      - name: Create release archive
        run: |
          cd target/${{ matrix.target }}/release
          tar czf debugger-mcp-${{ matrix.target }}.tar.gz debugger_mcp
          mv debugger-mcp-${{ matrix.target }}.tar.gz ${{ github.workspace }}/

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./debugger-mcp-${{ matrix.target }}.tar.gz
          asset_name: debugger-mcp-${{ matrix.target }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload raw binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./target/${{ matrix.target }}/release/debugger_mcp
          asset_name: debugger-mcp-${{ matrix.target }}
          asset_content_type: application/octet-stream
